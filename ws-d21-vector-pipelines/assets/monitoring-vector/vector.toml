# Enable Vector's GraphQL API to use `vector tap` and `vector top`
[api]
enabled = true
address = "127.0.0.1:8686"
playground = true

# Generate random logs using Vector itself
[sources.random_json_logs]
type = "generator"
format = "json"
interval = 1

[sources.random_syslog_logs]
type = "generator"
format = "syslog"
interval = 1

# Use Vector Remap Language to parse both log streams
[transforms.parse_json_logs]
type = "remap"
inputs = ["random_json_logs"]
source = '''
obj, err = parse_json(.message)
if err != null {
  log(err, level: "error")
}

. = obj
'''

[transforms.parse_syslog_logs]
type = "remap"
inputs = ["random_syslog_logs"]
source = '''
obj, err = parse_syslog(.message)
if err != null {
  log(err, level: "error")
}

. = obj
'''

# Send all the logs nowhere
[sinks.ether]
type = "blackhole"
inputs = ["parse_*"]

# Vector's internal logs
[sources.vector_logs]
type = "internal_logs"
host_key = "dash_workshop_katacoda"

[sinks.datadog_logs]
type = "datadog_logs"
inputs = ["vector_logs"]
default_api_key = "${DD_API_KEY}"
compression = "gzip"

# Vector's internal metrics
[sources.vector_metrics]
type = "internal_metrics"
namespace = "vector"

[sinks.datadog_metrics]
type = "datadog_metrics"
inputs = ["vector_metrics"]
api_key = "${DD_API_KEY}"